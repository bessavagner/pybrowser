:py:mod:`thatscraper`
=====================

.. py:module:: thatscraper


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   common/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   browser/index.rst
   data/index.rst
   extractor/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   thatscraper.Crawler
   thatscraper.Key




Attributes
~~~~~~~~~~

.. autoapisummary::

   thatscraper.ATTR_SELECTOR


.. py:class:: Crawler(browser: str = 'firefox', headless: bool = False, quit_on_failure: bool = True)

    A selenium.webdriver adapter.

   An instance of Window calss cam perform a series of automated
   actions on webpages. Designed to handle sites with heavy use of
   javascript.

   .. py:property:: driver

      "selenium webdriver

   .. py:property:: logger

      logger

   .. py:method:: quitdriver() -> Callable

      "safe quit webdriver to avoid memory leakages


   .. py:method:: __download_dir(path)


   .. py:method:: goto(url: str)

      open window at url


   .. py:method:: half_left_window()

      half_left_window

      Resize and shifts window to the left.


   .. py:method:: element(value: str, by_attribue: str = 'id') -> list

      element method.

      Selects an element by type of attribute defined with 'by',
      with 'value', from current page. See `thatscraper.ATTR_SELECTOR`
      for a list of attributes types.

      If elements are na availiable yet,
      the there will be an attempt every 'step' seconds, unitl excceed the
      total time 'timeout' (in seconds).

      :param value: attribute's value
      :type value: str
      :param by_attribute: attribute type., by default "id"
      :type by_attribute: str, optional

      :returns: Element retrieved.
      :rtype: WebElement


   .. py:method:: element_id(value: str) -> WebElement

      element_id

      Retrieve element from current page by it's id value.

      :param value: id's value.
      :type value: str

      :returns: Element retrieved.
      :rtype: WebElement


   .. py:method:: elements(value: str, by_attribute: str = 'id') -> WebElements

      elements

      Selects elements by type of attribute defined with 'by',
      with 'value', from current page. See `thatscraper.ATTR_SELECTOR`
      for a list of attributes names.

      If elements are na availiable yet,
      the there will be an attempt every 'step' seconds, unitl excceed the
      total time 'timeout' (in seconds).

      :param value: attribute's value
      :type value: str
      :param by_attribute: attribute type, by default "id"
      :type by_attribute: str, optional

      :returns: List with all elements selected.
      :rtype: WebElements


   .. py:method:: child_of(element: WebDriver, value: str, by_attribute: str = 'id') -> WebElement

      Selects child of `element`.

      :param element: parent
      :type element: WebDriver
      :param value: Child's attribute's value.
      :type value: str
      :param by_attribute: Attribute.
      :type by_attribute: str, optional

      :returns: Child element.
      :rtype: WebElement


   .. py:method:: children_of(element, value, by_attribute='id') -> WebElements

      Selects children of `element`.

      :param element: parent
      :type element: WebDriver
      :param value: Children's attribute's value.
      :type value: str
      :param by_attribute: Attribute.
      :type by_attribute: str, optional

      :returns: Child element.
      :rtype: list[WebElement] = WebElements


   .. py:method:: click_element(element: WebElement) -> WebElement

      click_element

      Click a selected element.

      :param element: Clickable (previously selected) element. If element
                      is not clickable, selenium raises InvalidSelectorException.
      :type element: WebElement

      :returns: Clicked element (selenium web element).
      :rtype: WebElement


   .. py:method:: click(value: str, by_attribute: str = 'id') -> WebElement

      "click on element


   .. py:method:: click_id(id_value) -> WebElement

      "quit element by id


   .. py:method:: send_to_element(element: WebElement, key, enter=False)

      send_key similar to Window.send

      Send 'key' to WebElement 'element'

      :param element: Valid WebElement from selenium.
      :type element: WebElement
      :param key:
      :type key: Valid Selenium key or text.

      :returns: Element which key was sent to.
      :rtype: WebElement


   .. py:method:: send(key, value: str, by_attribute='id', enter=False)

      send

      Send a valid 'key' to element with selector 'by' and
      corresponding 'value'.

      :param key:
      :type key: Valid Selenium key or text.
      :param value: _description_
      :type value: str
      :param by: _description_, by default 'name'
      :type by: str, optional
      :param step: timeout step, by default 0.5
      :type step: float, optional
      :param timeout: timeout until throw error, by default 10
      :type timeout: int, optional

      :returns: Element which key was sent to.
      :rtype: WebElement


   .. py:method:: arrow_down_element(element, n_times: int = 1, enter=False)

      arrow_down

      Press keyboard arrow down n_times at
      element.

      :param element: Valid WebElement from selenium
      :type element: WebElement
      :param n_times: Number of times pressing down key, by default 1
      :type n_times: int, optional


   .. py:method:: arrow_down(value: str, by_attribute='id', n_times: int = 1, enter=False)

      arrow_down

      Select element by given selector 'by' and
      corresponding value, then send keyboard
      arrow down n_times.

      :param value: value of the selected attributes
      :type value: str
      :param by: attribute, by default "name"
      :type by: str, optional
      :param step: timeout setp, by default 0.5
      :type step: float, optional
      :param timeout: timeout, by default 10
      :type timeout: int, optional
      :param n_times: times of pressing arrow up, by default 1
      :type n_times: int, optional
      :param enter: If True, 'enter' key is sent to element, by default False
      :type enter: bool, optional


   .. py:method:: arrow_up_element(element, n_times: int = 1, enter=False)

      arrow_down

      Presse keyboard arrow up n_times

      :param element: Valid WebElement from selenium
      :type element: WebElement
      :param n_times: Number of times pressing down key, by default 1
      :type n_times: int, optional


   .. py:method:: arrow_up(value: str, by_attribute='id', n_times: int = 1, enter=False)

      arrow_up

      Select element by given selector 'by' and
      corresponding value, then send keyboard
      arrow up n_times.

      :param value: value of the selected attributes
      :type value: str
      :param by: attribute, by default "name"
      :type by: str, optional
      :param step: timeout setp, by default 0.5
      :type step: float, optional
      :param timeout: timeout, by default 10
      :type timeout: int, optional
      :param n_times: times of pressing arrow up, by default 1
      :type n_times: int, optional
      :param enter: If True, 'enter' key is sent to element, by default False
      :type enter: bool, optional


   .. py:method:: items_of(parent: WebElement, click=True) -> WebElements

      items_of

      Select li elements nested within 'parent'. Syntax:
      ```html
      <parent>
          <ul>
              <li></li>
              <li></li>
              ...
              <li></li>
          </ul>
      </parent>
      ```
      :param parent: parent of ul element.
      :type parent: WebElement
      :param step: Time between trial calls, by default 0.5
      :type step: float, optional
      :param timeout: Total Timeout, by default 10
      :type timeout: int, optional
      :param click: Whether to click parent before and after, by default True
      :type click: bool, optional

      :returns: List of li elements.
      :rtype: WebElements


   .. py:method:: run_script(script: str)

      run_script

      Execute Javascript code given a string.

      When interacting with log in forms or register,
      prefer this method instead of `Crawler.send` or
      `Crawler.send_to_element`.

      :param script: Javascript code.
      :type script: str

      :returns: Whatever JavaScript code returns.
      :rtype: unknown


   .. py:method:: query_selector(selector: str)

      run document.querySelector()


   .. py:method:: value_to_selector(selector: str, value: str)

      value_to_selector

      Assing 'value' to value attribute of the
      first element found with 'selector'.

      When interacting with log in forms or register,
      prefer this method instead of `Crawler.send` or
      `Crawler.send_to_element`.

      :param selector: Element selector.
      :type selector: str
      :param value:
                    Element's value. Equivalent to:
                        document.querySelector(selector).value=value
                    in JavaScript.
      :type value: str

      :returns: Whatever JavaScript returns.
      :rtype: unkown


   .. py:method:: to_selector(selector: str, attribute: str, value: str)

      value_to_selector

      Assing 'value' to 'attribute' of the
      first element found with 'selector'.

      When interacting with log in forms or register,
      prefer this method instead of `Crawler.send` or
      `Crawler.send_to_element`.

      :param selector: Element selector.
      :type selector: str
      :param value:
                    Element's value. Equivalent to:
                        document.querySelector(selector).value=value
                    in JavaScript.
      :type value: str

      :returns: Whatever JavaScript returns.
      :rtype: unkown


   .. py:method:: scroll_page()

      scroll page 1 vh


   .. py:method:: google(query)

      select anchors from Google search page


   .. py:method:: source() -> str

      "source page


   .. py:method:: close() -> None

      Closes the current window.


   .. py:method:: quit(clean=False)

      Quits the driver and close every associated window.



.. py:class:: Key

   Bases: :py:obj:`selenium.webdriver.common.keys.Keys`

   "keys to use in send functions

   .. py:attribute:: enter
      

      

   .. py:attribute:: esc
      

      

   .. py:attribute:: delete
      

      

   .. py:attribute:: down
      

      

   .. py:attribute:: up
      

      

   .. py:attribute:: tab
      

      

   .. py:attribute:: backspace
      

      


.. py:data:: ATTR_SELECTOR
   

   

